{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "lammps",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#commands"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#eqexpr"
		},
		{
            "include": "#linecont"
		},
		{
			"name": "constant.numeric",
			"match": "\\b\\d+(\\.\\d+)?\\b"
		}
	],
	"repository": {
		"comments": {
			"name": "comment.line.number-sign.lammps",
			"match": "#.*"
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.lammps",
				"match": "\\b(if|while|for|return)\\b"
			}]
		},
		"commands": {
			"name": "support.function.lammps",
			"match": "^\\s*\\b(angle_coeff|angle_style|atom_modify|atom_style|balance|bond_coeff|bond_style|bond_write|boundary|box|change_box|clear|comm_modify|comm_style|compute|compute_modify|create_atoms|create_bonds|create_box|delete_atoms|delete_bonds|dielectric|dihedral_coeff|dihedral_style|dimension|displace_atoms|dump|dump_modify|echo|fix|fix_modify|group|group2ndx|hyper|if|info|improper_coeff|improper_style|include|jump|kspace_modify|kspace_style|label|lattice|log|mass|message|minimize|min_modify|min_style|molecule|ndx2group|neb|neigh_modify|neighbor|newton|next|package|pair_coeff|pair_modify|pair_style|pair_write|partition|prd|print|processors|python|quit|read_data|read_dump|read_restart|region|replicate|rerun|reset_ids|reset_timestep|restart|run|run_style|server|set|shell|special_bonds|suffix|tad|temper|temper|temper|thermo|thermo_modify|thermo_style|timer|timestep|uncompute|undump|unfix|units|variable|velocity|write_coeff|write_data|write_dump|write_restart)\\b"
		},
		"styles": {
			"name": "support.type.lammps",
			"match": "\\b(index)\\b"
		},
		"strings": {
			"patterns": [
				{"include": "#stringtripled"},
				{"include": "#stringtriples"},
				{"include": "#stringdouble"},
				{"include": "#stringsingle"}
			]
		},
		"stringtriples": {
			"name": "string.quoted.triple.s.lammps",
			"begin": "'''",
			"end": "'''",
			"patterns": [
				{"include": "#variables"},
				{"include": "#eqexpr"}
			]
		},
		"stringtripled": {
			"name": "string.quoted.triple.d.lammps",
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"patterns": [
				{"include": "#variables"},
				{"include": "#eqexpr"}
			]
		},
		"stringsingle": {
			"name": "string.quoted.single.lammps",
			"begin": "'",
			"end": "'",
			"patterns": [
				{"include": "#variables"},
				{"include": "#eqexpr"},
				{"include": "#linecont"}
			]
		},
		"stringdouble": {
			"name": "string.quoted.double.lammps",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{"include": "#variables"},
				{"include": "#eqexpr"},
				{"include": "#linecont"}
			]
		},
		"variables": {
			"name": "variable.other.lammps",
			"match": "(\\$\\{\\w*\\})|(\\b(v|f|c)_\\w+\\b)"
		},
		"eqexpr" : {
			"begin": "\\$\\(",
			"end": "\\)",
			"beginCaptures": {"0": {"name": "variable.other.lammps"}},
			"endCaptures": {"0": {"name": "variable.other.lammps"}},
			"patterns": [
				{ "include": "#paren-expression" },
				{ "include": "#variables" }
			]
		},
		"paren-expression": {
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{ "include": "#paren-expression" },
				{ "include": "#variables" }
			]
		},
		"linecont": {
			"match": "\\s*&\\s*$",
            "name": "constant.character.escape"
		}
	},
	"scopeName": "source.lmp"
}